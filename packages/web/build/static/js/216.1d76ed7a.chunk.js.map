{"version":3,"file":"static/js/216.1d76ed7a.chunk.js","mappings":"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","sources":["../../core/src/Hooks/useActionDispatcher.ts","../../core/src/Hooks/createUseDebouncedHook.ts","../../core/src/Hooks/useIsFirstRender.ts","../../core/src/Hooks/usePrevious.ts","../../core/src/Hooks/useMemoCompare.ts","../../core/src/Hooks/useUnmountEffect.ts","../../core/src/Hooks/useStableCallback.ts","../../core/src/Hooks/useDebounced.ts","../../core/src/Hooks/useStoreSelector.ts","../../uikit/src/Button/ButtonWithTooltip.tsx","webpack://@infomat/web/../uikit/src/Dashboard/Dashboard.module.scss?6395","../../uikit/src/Dashboard/Dashboard.tsx","webpack://@infomat/web/../uikit/src/Fields/TextField/TextField.module.scss?8806","../../uikit/src/Fields/TextField/TextField.tsx","../../core/src/Redux/User/Selectors/selectLogin.ts","webpack://@infomat/web/./src/Components/Profile/Profile.module.scss?4f86","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","webpack://@infomat/web/./src/Components/Information/Information.module.scss?844d","Components/Information/Information.tsx","../../core/src/Redux/User/Selectors/selectIsNetworkAvailable.ts","../../core/src/Redux/User/Selectors/selectErrorLogin.ts","../../core/src/Redux/User/Selectors/selectIsLoading.ts","../../uikit/src/IconButton/ActionIconButton/ActionIconButton.tsx","webpack://@infomat/web/../uikit/src/Fields/PasswordField/PasswordField.module.scss?c35e","../../uikit/src/Fields/PasswordField/PasswordField.tsx","webpack://@infomat/web/./src/Components/Login/Desktop/LoginDesktop.module.scss?ffe6","Components/Login/Desktop/LoginDesktop.tsx","Components/Login/LoginContainer.tsx","Routes/Pages/Desktop/LoginPage.tsx","Components/VerticalHeightUnitAdjuster.tsx","Containers/DocumentTitleContainer.tsx","../../core/src/Redux/Notifications/Selectors/selectShowingNotifications.ts","../../core/src/Redux/Notifications/Selectors/selectDismissingNotifications.ts","../../uikit/src/Notification/NotificationIcon/NotificationIcon.tsx","webpack://@infomat/web/../uikit/src/Notification/Notification.module.scss?e983","../../uikit/src/Notification/Notification.tsx","../../core/src/Actions/Client/EnumActions.ts","Containers/NotifierContainer.tsx","Routes/PageContainer/PageContainerDesktop.tsx","Routes/ProtectedRoute/ProtectedRoute.tsx","Routes/PublicRoute/PublicRoute.tsx","Routes/PageLoaders.ts","Routes/RouterDesktop.tsx","../../core/src/Actions/Client/ActionCreator.ts","AppRouter.tsx","Redux/sagaContext.ts","AppRouterContainerDesktop.tsx"],"sourcesContent":["import {useCallback} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {ActionCreatorWithPreparedPayload} from '@reduxjs/toolkit';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst useActionDispatcher = <T, M, E, A extends any[]>(\r\n\tactionCreator: ActionCreatorWithPreparedPayload<A, T, string, E, M>,\r\n) => {\r\n\tconst dispatch = useDispatch();\r\n\r\n\treturn useCallback((...params: A) => dispatch(actionCreator(...params)), [actionCreator, dispatch]);\r\n};\r\n\r\nexport default useActionDispatcher;\r\n","import _ from 'lodash';\r\n\r\nimport {useMemoCompare} from '@infomat/core/src/Hooks/useMemoCompare';\r\nimport {useUnmountEffect} from '@infomat/core/src/Hooks/useUnmountEffect';\r\nimport {useStableCallback} from '@infomat/core/src/Hooks/useStableCallback';\r\n\r\nenum EnumUnmountAction {\r\n\tNONE,\r\n\tCANCEL,\r\n\tFLUSH,\r\n}\r\n\r\nexport const createUseDebouncedHook =\r\n\t<TDebounceFn extends typeof _.debounce | typeof _.throttle>(debounceFn: TDebounceFn) =>\r\n\t<T extends Parameters<TDebounceFn>[0]>(\r\n\t\tfn: T,\r\n\t\twait?: Parameters<TDebounceFn>[1],\r\n\t\toptions?: Parameters<TDebounceFn>[2],\r\n\t\tunmountAction = EnumUnmountAction.CANCEL,\r\n\t): _.DebouncedFunc<T> => {\r\n\t\tconst stableFn = useStableCallback(fn);\r\n\t\tconst debounced = useMemoCompare((arg) => debounceFn(stableFn, arg.wait, arg.options), {wait, options});\r\n\t\tconst callbackIsUnmountFlush = unmountAction === EnumUnmountAction.FLUSH ? debounced.flush : _.noop;\r\n\t\tuseUnmountEffect(unmountAction === EnumUnmountAction.CANCEL ? debounced.cancel : callbackIsUnmountFlush);\r\n\t\treturn debounced;\r\n\t};\r\n","import {useRef} from 'react';\r\n\r\nexport const useIsFirstRender = () => {\r\n\tconst isFirstRenderRef = useRef(true);\r\n\r\n\tconst isFirstRender = isFirstRenderRef.current;\r\n\tisFirstRenderRef.current = false;\r\n\r\n\treturn isFirstRender;\r\n};\r\n","import {useRef} from 'react';\r\n\r\nexport const usePrevious = <T>(value: T): T | undefined => {\r\n\tconst ref = useRef<T>();\r\n\r\n\tconst previous = ref.current;\r\n\tref.current = value;\r\n\r\n\treturn previous;\r\n};\r\n","import _ from 'lodash';\r\nimport {useRef} from 'react';\r\n\r\nimport {useIsFirstRender} from './useIsFirstRender';\r\nimport {usePrevious} from './usePrevious';\r\n\r\nexport const useMemoCompare = <TOutput, TInput>(\r\n\tgetter: (arg: TInput) => TOutput,\r\n\tvalue: TInput,\r\n\tcomparator: (previous: TInput | undefined, next: TInput) => boolean = _.isEqual,\r\n): TOutput => {\r\n\tconst resultRef = useRef<TOutput>();\r\n\r\n\tconst previous = usePrevious(value);\r\n\r\n\tif (useIsFirstRender() || !comparator(previous, value)) {\r\n\t\tresultRef.current = getter(value);\r\n\t}\r\n\r\n\treturn resultRef.current as TOutput;\r\n};\r\n","import {useEffect, useRef} from 'react';\r\n\r\nexport const useUnmountEffect = (callback: () => void) => {\r\n\tconst ref = useRef(callback);\r\n\tref.current = callback;\r\n\r\n\tuseEffect(() => () => ref.current(), []);\r\n};\r\n","import {useRef} from 'react';\r\n\r\nexport const useStableCallback = <P extends any[], R>(fn: (...args: P) => R): ((...args: P) => R) => {\r\n\tconst inputRef = useRef(fn);\r\n\tinputRef.current = fn;\r\n\r\n\tconst outputRef = useRef((...args: P) => inputRef.current(...args));\r\n\treturn outputRef.current;\r\n};\r\n","import _ from 'lodash';\r\n\r\nimport {createUseDebouncedHook} from '@infomat/core/src/Hooks/createUseDebouncedHook';\r\n\r\nexport const useDebounced = createUseDebouncedHook(_.debounce);\r\n","import {useSelector} from 'react-redux';\r\n\r\nimport IRootState from '@infomat/core/src/Redux/IRootState';\r\n\r\nexport const useStoreSelector = <T, P extends any[]>(\r\n\tselector: (state: IRootState, ...params: P) => T,\r\n\t...params: P\r\n): T => {\r\n\tconst selectorFunc = (state: IRootState) => selector(state, ...params);\r\n\r\n\treturn useSelector(selectorFunc);\r\n};\r\n","import React, {ReactNode} from 'react';\r\nimport {Tooltip} from '@mui/material';\r\n\r\nimport Button, {TButtonProps} from './Button';\r\n\r\nconst ButtonWithTooltip = ({\r\n\ttitle = 'Заполните все обязательные поля*',\r\n\tvariant = 'contained',\r\n\tchildren = 'Сохранить',\r\n\tplacement = 'top-start',\r\n\tdisabled,\r\n\t...props\r\n}: TButtonWithTooltipProps) => {\r\n\treturn disabled ? (\r\n\t\t<Tooltip disableHoverListener={!disabled} title={title} placement={placement} style={{userSelect: 'none'}}>\r\n\t\t\t<div>\r\n\t\t\t\t<Button disabled={disabled} variant={variant} type=\"submit\" {...props}>\r\n\t\t\t\t\t{children}\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t</Tooltip>\r\n\t) : (\r\n\t\t<Button disabled={disabled} variant={variant} type=\"submit\" {...props}>\r\n\t\t\t{children}\r\n\t\t</Button>\r\n\t);\r\n};\r\n\r\nexport type TButtonWithTooltipProps = TButtonProps & {\r\n\tchildren?: ReactNode;\r\n\ttitle?: string;\r\n\tplacement?:\r\n\t\t| 'bottom-end'\r\n\t\t| 'bottom-start'\r\n\t\t| 'bottom'\r\n\t\t| 'left-end'\r\n\t\t| 'left-start'\r\n\t\t| 'left'\r\n\t\t| 'right-end'\r\n\t\t| 'right-start'\r\n\t\t| 'right'\r\n\t\t| 'top-end'\r\n\t\t| 'top-start'\r\n\t\t| 'top';\r\n};\r\n\r\nexport default ButtonWithTooltip;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Dashboard_button__x4DdO\",\"text\":\"Dashboard_text__tqQAR\",\"label\":\"Dashboard_label__dcIWz\",\"title\":\"Dashboard_title__0FC1p\",\"icon\":\"Dashboard_icon__X+7Yf\",\"paper\":\"Dashboard_paper__xfNUw\"};","import React, {ReactNode} from 'react';\r\nimport {ClickAwayListener, Popper, Typography, Grow, Paper, MenuList} from '@mui/material';\r\n\r\nimport {Icon, IconSize, IconType} from '@infomat/uikit/src/Icon';\r\n\r\nimport style from './Dashboard.module.scss';\r\n\r\nconst Dashboard = ({title, label, children, RootComponent}: TDashboardProps) => {\r\n\tconst [open, setOpen] = React.useState(false);\r\n\tconst anchorRef = React.useRef<HTMLDivElement>(null);\r\n\r\n\tconst handleToggle = () => {\r\n\t\tsetOpen((prevOpen) => !prevOpen);\r\n\t};\r\n\r\n\tconst handleClose = (event: Event | React.SyntheticEvent) => {\r\n\t\tif (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsetOpen(false);\r\n\t};\r\n\r\n\tfunction handleListKeyDown(event: React.KeyboardEvent) {\r\n\t\tif (event.key === 'Tab') {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tsetOpen(false);\r\n\t\t} else if (event.key === 'Escape') {\r\n\t\t\tsetOpen(false);\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className={style.button} ref={anchorRef} onClick={handleToggle}>\r\n\t\t\t\t{RootComponent ? (\r\n\t\t\t\t\tRootComponent\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<div className={style.text}>\r\n\t\t\t\t\t\t\t{label && <Typography className={style.label}>{label}</Typography>}\r\n\t\t\t\t\t\t\t{title && <Typography className={style.title}>{title}</Typography>}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<Icon\r\n\t\t\t\t\t\t\tclassName={style.icon}\r\n\t\t\t\t\t\t\ttype={open ? IconType.keyboardArrowUp : IconType.keyboardArrowDown}\r\n\t\t\t\t\t\t\tsize={IconSize.tiny}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t<Popper\r\n\t\t\t\tclassName={style.popper}\r\n\t\t\t\topen={open}\r\n\t\t\t\tanchorEl={anchorRef.current}\r\n\t\t\t\trole={undefined}\r\n\t\t\t\tplacement=\"bottom-end\"\r\n\t\t\t\ttransition\r\n\t\t\t\tdisablePortal\r\n\t\t\t>\r\n\t\t\t\t{({TransitionProps, placement}) => (\r\n\t\t\t\t\t<Grow className={style.popper} {...TransitionProps}>\r\n\t\t\t\t\t\t<Paper classes={{root: style.paper}}>\r\n\t\t\t\t\t\t\t<ClickAwayListener onClickAway={handleClose}>\r\n\t\t\t\t\t\t\t\t<MenuList onClick={handleClose} onKeyDown={handleListKeyDown}>\r\n\t\t\t\t\t\t\t\t\t{children}\r\n\t\t\t\t\t\t\t\t</MenuList>\r\n\t\t\t\t\t\t\t</ClickAwayListener>\r\n\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t</Grow>\r\n\t\t\t\t)}\r\n\t\t\t</Popper>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\ntype TDashboardProps = {\r\n\tchildren?: ReactNode;\r\n\tlabel?: string;\r\n\ttitle?: string;\r\n\tRootComponent?: ReactNode;\r\n};\r\n\r\nexport default Dashboard;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"TextField_label__3lpV0\"};","import React from 'react';\r\nimport {TextField as MuiTextField, TextFieldProps, Typography, Grid} from '@mui/material';\r\n\r\nimport {Icon, IconSize, IconType} from '@infomat/uikit/src/Icon';\r\n\r\nimport style from './TextField.module.scss';\r\n\r\nconst TextField = ({helperText, label, ...restProps}: TextFieldProps) => {\r\n\treturn (\r\n\t\t<Grid container direction=\"column\">\r\n\t\t\t{label && <Typography className={style.label}>{label}</Typography>}\r\n\t\t\t<MuiTextField\r\n\t\t\t\t{...restProps}\r\n\t\t\t\thelperText={\r\n\t\t\t\t\thelperText &&\r\n\t\t\t\t\trestProps.error && (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<Icon type={IconType.warning} size={IconSize.tiny} /> {helperText}\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t/>\r\n\t\t</Grid>\r\n\t);\r\n};\r\n\r\nexport default TextField;\r\n","import {createSelector} from '@infomat/core/src/Utils/Redux/createSelector';\r\nimport {TUserSlice} from '@infomat/core/src/Redux/User/slice';\r\nimport {getUserState} from './getUserState';\r\n\r\nexport const selectLogin = createSelector([getUserState], (state: TUserSlice) => state.login);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Profile_item__G1zhm\",\"title\":\"Profile_title__2g8i4\",\"container\":\"Profile_container__CI-ug\"};","import React from 'react';\r\nimport {MenuItem, Typography} from '@mui/material';\r\n\r\nimport PropertyHandler from '@infomat/core/src/Types/PropertyHandler';\r\nimport Dashboard from '@infomat/uikit/src/Dashboard/Dashboard';\r\n\r\nimport style from './Profile.module.scss';\r\nimport {Icon, IconSize, IconType} from '@infomat/uikit/src/Icon';\r\n\r\nconst Profile = ({onLogout, login}: TProfileProps) => {\r\n\treturn (\r\n\t\t<div className={style.container}>\r\n\t\t\t<Dashboard label=\"Администратор\" title={login}>\r\n\t\t\t\t<MenuItem classes={{root: style.item}} onClick={onLogout}>\r\n\t\t\t\t\t<Icon type={IconType.logout} size={IconSize.tiny} />\r\n\t\t\t\t\t<Typography className={style.title}>Выход</Typography>\r\n\t\t\t\t</MenuItem>\r\n\t\t\t</Dashboard>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\ntype TProfileProps = {\r\n\tonLogout: PropertyHandler;\r\n\tlogin?: string;\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\n\r\nimport {useStoreSelector} from '@infomat/core/src/Hooks/useStoreSelector';\r\nimport {selectLogin} from '@infomat/core/src/Redux/User/Selectors/selectLogin';\r\nimport useActionDispatcher from '@infomat/core/src/Hooks/useActionDispatcher';\r\nimport {userClientOnlyActions} from '@infomat/core/src/Redux/User/Actions/userClientOnlyActions';\r\n\r\nimport Profile from './Profile';\r\n\r\nconst ProfileContainer = () => (\r\n\t<Profile login={useStoreSelector(selectLogin)} onLogout={useActionDispatcher(userClientOnlyActions.logout)} />\r\n);\r\n\r\nexport default ProfileContainer;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"logo\":\"Information_logo__njocC\",\"title\":\"Information_title__UY7oJ\",\"wrapper\":\"Information_wrapper__dviYR\"};","import React from 'react';\r\nimport {Grid, Typography} from '@mui/material';\r\n\r\nimport InfomatLogo from 'src/Assets/Images/infomat_logo.png';\r\nimport ProfileContainer from 'src/Components/Profile/ProfileContainer';\r\n\r\nimport style from './Information.module.scss';\r\n\r\nconst Information = () => {\r\n\treturn (\r\n\t\t<Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" paddingBottom={3}>\r\n\t\t\t<Grid item alignItems=\"center\" gap={2.5} className={style.wrapper}>\r\n\t\t\t\t<img src={InfomatLogo} alt=\"Infomat Logo\" className={style.logo} />\r\n\t\t\t\t<Typography className={style.title}>Панель управления </Typography>\r\n\t\t\t</Grid>\r\n\t\t\t<Grid item>\r\n\t\t\t\t<ProfileContainer />\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t);\r\n};\r\n\r\nexport default Information;\r\n","import {createSelector} from '@infomat/core/src/Utils/Redux/createSelector';\r\nimport {TUserSlice} from '@infomat/core/src/Redux/User/slice';\r\nimport {getUserState} from '@infomat/core/src/Redux/User/Selectors/getUserState';\r\n\r\nexport const selectIsNetworkAvailable = createSelector([getUserState], (state: TUserSlice) => state.isNetworkAvailable);\r\n","import {createSelector} from '@infomat/core/src/Utils/Redux/createSelector';\r\nimport {TUserSlice} from '@infomat/core/src/Redux/User/slice';\r\nimport {getUserState} from './getUserState';\r\n\r\nexport const selectErrorLogin = createSelector([getUserState], (state: TUserSlice) => state.errorLogin);\r\n","import {createSelector} from '@infomat/core/src/Utils/Redux/createSelector';\r\nimport {TUserSlice} from '@infomat/core/src/Redux/User/slice';\r\nimport {getUserState} from './getUserState';\r\n\r\nexport const selectIsLoading = createSelector([getUserState], (state: TUserSlice) => state.isLoading);\r\n","import _ from 'lodash';\r\nimport React, {ForwardedRef, forwardRef} from 'react';\r\nimport {IconButton} from '@mui/material';\r\n\r\nimport {TIconButtonProps} from '@infomat/uikit/src/IconButton/types';\r\nimport {Icon} from '@infomat/uikit/src/Icon';\r\n\r\nconst ActionIconButton = forwardRef(\r\n\t({iconType, iconSize, iconColor, children, ...restProps}: TIconButtonProps, ref: ForwardedRef<HTMLButtonElement>) => (\r\n\t\t<IconButton {...restProps} ref={ref}>\r\n\t\t\t{!_.isUndefined(iconType) && <Icon type={iconType} size={iconSize} color={iconColor} />}\r\n\t\t\t{children}\r\n\t\t</IconButton>\r\n\t),\r\n);\r\n\r\nexport default ActionIconButton;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"toggleButton\":\"PasswordField_toggleButton__WkpJB\"};","import React, {useCallback, useState} from 'react';\r\nimport {TextFieldProps, Tooltip} from '@mui/material';\r\n\r\nimport ActionIconButton from '@infomat/uikit/src/IconButton/ActionIconButton/ActionIconButton';\r\nimport {IconType, IconSize} from '@infomat/uikit/src/Icon';\r\nimport TextField from '@infomat/uikit/src/Fields/TextField/TextField';\r\n\r\nimport style from './PasswordField.module.scss';\r\n\r\nconst PasswordField = ({\r\n\thasError,\r\n\tisDisabled,\r\n\ttextStrings,\r\n\tinputDataTestId,\r\n\tbuttonDataTestId,\r\n\t...restProps\r\n}: TPasswordFieldProps) => {\r\n\tconst [isPasswordVisible, setPasswordVisible] = useState(false);\r\n\r\n\tconst toggleIsPasswordVisible = useCallback(() => {\r\n\t\tsetPasswordVisible((prevState) => !prevState);\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<TextField\r\n\t\t\t{...restProps}\r\n\t\t\tdisabled={isDisabled}\r\n\t\t\terror={hasError}\r\n\t\t\ttype={isPasswordVisible ? 'text' : 'password'}\r\n\t\t\tautoComplete=\"off\"\r\n\t\t\tdata-test-id={inputDataTestId}\r\n\t\t\tInputProps={{\r\n\t\t\t\tendAdornment: (\r\n\t\t\t\t\t<Tooltip title={isPasswordVisible ? textStrings.hidePassword : textStrings.showPassword}>\r\n\t\t\t\t\t\t<ActionIconButton\r\n\t\t\t\t\t\t\ticonType={isPasswordVisible ? IconType.visibility : IconType.visibilityOff}\r\n\t\t\t\t\t\t\ticonSize={IconSize.small}\r\n\t\t\t\t\t\t\tonClick={toggleIsPasswordVisible}\r\n\t\t\t\t\t\t\tonMouseDown={toggleIsPasswordVisible}\r\n\t\t\t\t\t\t\tclassName={style.toggleButton}\r\n\t\t\t\t\t\t\tdata-test-id={buttonDataTestId}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Tooltip>\r\n\t\t\t\t),\r\n\t\t\t}}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\ntype TPasswordFieldProps = Pick<\r\n\tTextFieldProps,\r\n\t'value' | 'onChange' | 'helperText' | 'placeholder' | 'className' | 'tabIndex' | 'label' | 'variant'\r\n> & {\r\n\thasError?: boolean;\r\n\tisDisabled?: boolean;\r\n\ttextStrings: {\r\n\t\tshowPassword: string;\r\n\t\thidePassword: string;\r\n\t};\r\n\tinputDataTestId?: string;\r\n\tbuttonDataTestId?: string;\r\n};\r\n\r\nexport default PasswordField;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"login\":\"LoginDesktop_login__BEltw\",\"content\":\"LoginDesktop_content__KzNrK\",\"form\":\"LoginDesktop_form__9+dKz\",\"logo\":\"LoginDesktop_logo__WWuAo\",\"title\":\"LoginDesktop_title__aYBhv\",\"description\":\"LoginDesktop_description__akHnh\",\"button\":\"LoginDesktop_button__sjOzV\"};","import _ from 'lodash';\r\nimport React, {useCallback, useState} from 'react';\r\nimport {Grid, Typography} from '@mui/material';\r\n\r\nimport ButtonWithTooltip from '@infomat/uikit/src/Button/ButtonWithTooltip';\r\nimport PasswordField from '@infomat/uikit/src/Fields/PasswordField/PasswordField';\r\nimport TextField from '@infomat/uikit/src/Fields/TextField/TextField';\r\nimport PropertyHandler from '@infomat/core/src/Types/PropertyHandler';\r\n\r\nimport InfomatLogo from 'src/Assets/Images/infomat_logo.png';\r\n\r\nimport style from './LoginDesktop.module.scss';\r\n\r\nconst LoginDesktop = ({onLogin, isNetworkAvailable, isLoggingIn, error}: TLoginProps) => {\r\n\tconst [login, setLogin] = useState('');\r\n\tconst [password, setPassword] = useState('');\r\n\r\n\tconst onSubmit = useCallback(\r\n\t\t(e: React.SyntheticEvent) => {\r\n\t\t\te.preventDefault();\r\n\r\n\t\t\tonLogin(login, password);\r\n\t\t},\r\n\t\t[onLogin, login, password],\r\n\t);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Grid container justifyContent=\"center\" alignItems=\"center\" className={style.login}>\r\n\t\t\t\t<Grid item className={style.content} gap={4}>\r\n\t\t\t\t\t<Grid item container justifyContent=\"center\" alignItems=\"center\" gap={3}>\r\n\t\t\t\t\t\t<img src={InfomatLogo} alt=\"Infomat Logo\" className={style.logo} />\r\n\t\t\t\t\t\t<Grid item container justifyContent=\"center\" alignItems=\"center\" gap={1.5}>\r\n\t\t\t\t\t\t\t<Typography className={style.title}>Добро пожаловать в панель администратора!</Typography>\r\n\t\t\t\t\t\t\t<Typography className={style.description}>Введите данные для входа</Typography>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item container justifyContent=\"center\" paddingX={2}>\r\n\t\t\t\t\t\t<form onSubmit={onSubmit} noValidate autoComplete=\"off\" className={style.form}>\r\n\t\t\t\t\t\t\t<Grid container direction=\"column\" className={style.inputs} gap={2.5}>\r\n\t\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\t\tname=\"user\"\r\n\t\t\t\t\t\t\t\t\tplaceholder={'E-mail'}\r\n\t\t\t\t\t\t\t\t\tautoComplete=\"off\"\r\n\t\t\t\t\t\t\t\t\ttabIndex={1}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => setLogin(e.target.value)}\r\n\t\t\t\t\t\t\t\t\tvalue={login}\r\n\t\t\t\t\t\t\t\t\tdisabled={isLoggingIn}\r\n\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\t\t\tlabel={'E-mail'}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<PasswordField\r\n\t\t\t\t\t\t\t\t\thasError={!!error && error.length > 0}\r\n\t\t\t\t\t\t\t\t\tisDisabled={isLoggingIn}\r\n\t\t\t\t\t\t\t\t\tvalue={password}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\r\n\t\t\t\t\t\t\t\t\tplaceholder={'0000000'}\r\n\t\t\t\t\t\t\t\t\thelperText={error && error?.length > 0 ? error : false}\r\n\t\t\t\t\t\t\t\t\ttabIndex={2}\r\n\t\t\t\t\t\t\t\t\ttextStrings={{\r\n\t\t\t\t\t\t\t\t\t\tshowPassword: 'Показать пароль',\r\n\t\t\t\t\t\t\t\t\t\thidePassword: 'Скрыть пароль',\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<ButtonWithTooltip\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\tonClick={onSubmit}\r\n\t\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\t\tdisabled={_.isEmpty(login) || _.isEmpty(password) || !isNetworkAvailable || isLoggingIn}\r\n\t\t\t\t\t\t\t\ttabIndex={3}\r\n\t\t\t\t\t\t\t\tclassName={style.button}\r\n\t\t\t\t\t\t\t\tplacement=\"bottom-end\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tВойти\r\n\t\t\t\t\t\t\t</ButtonWithTooltip>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\ntype TLoginProps = {\r\n\terror?: string;\r\n\tisLoggingIn?: boolean;\r\n\tonLogin: PropertyHandler<string, string>;\r\n\tisNetworkAvailable?: boolean;\r\n};\r\n\r\nexport default LoginDesktop;\r\n","import React, {useCallback} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {Navigate} from 'react-router';\r\nimport _ from 'lodash';\r\n\r\nimport {userClientToServerActions} from '@infomat/core/src/Redux/User/Actions/userClientToServerActions';\r\nimport {selectIsNetworkAvailable} from '@infomat/core/src/Redux/User/Selectors/selectIsNetworkAvailable';\r\nimport {selectIsLoggedIn} from '@infomat/core/src/Redux/User/Selectors/selectIsLoggedIn';\r\nimport {selectErrorLogin} from '@infomat/core/src/Redux/User/Selectors/selectErrorLogin';\r\nimport {selectIsLoading} from '@infomat/core/src/Redux/User/Selectors/selectIsLoading';\r\nimport {useStoreSelector} from '@infomat/core/src/Hooks/useStoreSelector';\r\nimport Spinner from '@infomat/uikit/src/Spinner/Spinner';\r\n\r\nimport {Routes} from 'src/Routes/Routes';\r\n\r\nimport LoginDesktop from './Desktop/LoginDesktop';\r\n\r\nconst LoginContainer = () => {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst isNetworkAvailable = useStoreSelector(selectIsNetworkAvailable);\r\n\tconst isLoggedIn = useStoreSelector(selectIsLoggedIn);\r\n\tconst isLoading = useStoreSelector(selectIsLoading);\r\n\tconst error = useStoreSelector(selectErrorLogin);\r\n\r\n\tconst onLogin = useCallback(\r\n\t\t(login: string, password: string) => dispatch(userClientToServerActions.login({login, password})),\r\n\t\t[dispatch],\r\n\t);\r\n\r\n\tif (isLoggedIn) {\r\n\t\treturn <Navigate to={{pathname: Routes.information}} />;\r\n\t}\r\n\r\n\treturn isLoading ? (\r\n\t\t<Spinner />\r\n\t) : (\r\n\t\t<LoginDesktop error={error} isLoggingIn={isLoggedIn} isNetworkAvailable={isNetworkAvailable} onLogin={onLogin} />\r\n\t);\r\n};\r\n\r\nexport default LoginContainer;\r\n","import React from 'react';\r\nimport {Helmet} from 'react-helmet';\r\n\r\nimport LoginContainer from 'src/Components/Login/LoginContainer';\r\n\r\nconst LoginPage = () => {\r\n\tconst title = 'Авторизация';\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Helmet title={title} />\r\n\t\t\t<LoginContainer />\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default LoginPage;\r\n","import {FC, useEffect} from 'react';\r\n\r\nimport {useDebounced} from '@infomat/core/src/Hooks/useDebounced';\r\n\r\n/**\r\n * @link https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\r\n */\r\nconst VerticalHeightUnitAdjuster: FC = () => {\r\n\tconst adjustHeight = useDebounced(() => {\r\n\t\tconst vh = window.innerHeight * 0.01;\r\n\r\n\t\tdocument.documentElement.style.setProperty('--vh', `${vh}px`);\r\n\t}, 400);\r\n\r\n\tuseEffect(() => {\r\n\t\tadjustHeight();\r\n\t\twindow.addEventListener('resize', adjustHeight);\r\n\t\treturn () => window.removeEventListener('resize', adjustHeight);\r\n\t}, [adjustHeight]);\r\n\r\n\treturn null;\r\n};\r\n\r\nexport default VerticalHeightUnitAdjuster;\r\n","import React, {FC} from 'react';\r\n\r\nimport DocumentTitle from 'src/Components/DocumentTitle';\r\n\r\nconst DocumentTitleContainer: FC<TDocumentTitleContainerProps> = (props) => {\r\n\treturn <DocumentTitle {...props} />;\r\n};\r\n\r\ntype TDocumentTitleContainerProps = {\r\n\tversion?: string;\r\n\tdelay?: number;\r\n};\r\n\r\nexport default DocumentTitleContainer;\r\n","import _ from 'lodash';\r\n\r\nimport {createSelector} from '@infomat/core/src/Utils/Redux/createSelector';\r\nimport {selectAllNotifications} from '@infomat/core/src/Redux/Notifications/Selectors/defaultSelectors';\r\nimport {EnumNotificationStatus} from '@infomat/core/src/Redux/Notifications/EnumNotificationStatus';\r\n\r\nexport const selectShowingNotifications = createSelector([selectAllNotifications], (notifications) =>\r\n\t_.filter(notifications, (notification) => notification.status === EnumNotificationStatus.SHOWING),\r\n);\r\n","import _ from 'lodash';\r\n\r\nimport {createSelector} from '@infomat/core/src/Utils/Redux/createSelector';\r\nimport {selectAllNotifications} from '@infomat/core/src/Redux/Notifications/Selectors/defaultSelectors';\r\nimport {EnumNotificationStatus} from '@infomat/core/src/Redux/Notifications/EnumNotificationStatus';\r\n\r\nexport const selectDismissingNotifications = createSelector([selectAllNotifications], (notifications) =>\r\n\t_.filter(notifications, (notification) => notification.status === EnumNotificationStatus.DISMISSING),\r\n);\r\n","import React from 'react';\r\nimport {AlertColor} from '@mui/material/Alert/Alert';\r\n\r\nimport {Icon, IconColor, IconSize, IconType} from '@infomat/uikit/src/Icon';\r\n\r\nconst NotificationIcon = ({notificationType}: TNotificationIconProps) => {\r\n\tswitch (notificationType) {\r\n\t\tcase 'success':\r\n\t\t\treturn <Icon type={IconType.checkCircleRounded} color={IconColor.green} size={IconSize.small} />;\r\n\t\tcase 'error':\r\n\t\t\treturn <Icon type={IconType.error} color={IconColor.red} size={IconSize.small} />;\r\n\t\tcase 'warning':\r\n\t\t\treturn <Icon type={IconType.warning} color={IconColor.orange} size={IconSize.small} />;\r\n\t\tcase 'info':\r\n\t\t\treturn <Icon type={IconType.info} color={IconColor.blue} size={IconSize.small} />;\r\n\t\tdefault:\r\n\t\t\treturn <Icon type={IconType.info} color={IconColor.blue} size={IconSize.small} />;\r\n\t}\r\n};\r\ntype TNotificationIconProps = {\r\n\tnotificationType?: AlertColor;\r\n};\r\n\r\nexport default NotificationIcon;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Notification_root__VeXSp\",\"buttonTitle\":\"Notification_buttonTitle__iRtlp\",\"noSeverityTextColor\":\"Notification_noSeverityTextColor__cn37h\",\"noSeverityBackground\":\"Notification_noSeverityBackground__AE2BH\",\"message\":\"Notification_message__y92N7\",\"title\":\"Notification_title__nNdIx\",\"action\":\"Notification_action__X+qsx\",\"timer\":\"Notification_timer__v97bf\",\"messageBox\":\"Notification_messageBox__7cQmE\"};","import {Alert, AlertTitle, CircularProgress} from '@mui/material';\r\nimport React, {ForwardedRef, ReactNode} from 'react';\r\nimport {AlertProps} from '@mui/material/Alert/Alert';\r\nimport _ from 'lodash';\r\nimport classNames from 'classnames';\r\n\r\nimport NotificationIcon from '@infomat/uikit/src/Notification/NotificationIcon/NotificationIcon';\r\nimport {EnumNotificationSeverity} from '@infomat/uikit/src/Notification/EnumNotificationSeverity';\r\nimport PropertyHandler from '@infomat/core/src/Types/PropertyHandler';\r\n\r\nimport style from './Notification.module.scss';\r\nimport Button from '../Button/Button';\r\nimport {Icon, IconColor, IconSize, IconType} from '../Icon';\r\n\r\nconst Notification = React.forwardRef(\r\n\t(\r\n\t\t{\r\n\t\t\tmessage,\r\n\t\t\taction,\r\n\t\t\tnotificationTitle,\r\n\t\t\tseverity,\r\n\t\t\trole = 'alert',\r\n\t\t\twithIcon = true,\r\n\t\t\tclassName,\r\n\t\t\tonClose,\r\n\t\t\tisLoading,\r\n\t\t\tbuttonTitle,\r\n\t\t\t...props\r\n\t\t}: TNotificationProps,\r\n\t\tref: ForwardedRef<HTMLDivElement>,\r\n\t) => {\r\n\t\tconst icon = !isLoading ? (\r\n\t\t\t<NotificationIcon notificationType={severity} />\r\n\t\t) : (\r\n\t\t\t<CircularProgress color={severity} size={18} />\r\n\t\t);\r\n\r\n\t\treturn (\r\n\t\t\t<Alert\r\n\t\t\t\ticon={withIcon ? icon : false}\r\n\t\t\t\trole={role}\r\n\t\t\t\tref={(el) => {\r\n\t\t\t\t\tif (_.isFunction(ref)) {\r\n\t\t\t\t\t\tref(el);\r\n\t\t\t\t\t} else if (ref) {\r\n\t\t\t\t\t\tref.current = el;\r\n\t\t\t\t\t}\r\n\t\t\t\t}}\r\n\t\t\t\tseverity={severity}\r\n\t\t\t\taction={\r\n\t\t\t\t\tbuttonTitle ? (\r\n\t\t\t\t\t\t<div className={style.buttonTitle}>\r\n\t\t\t\t\t\t\t<Button onClick={onClose} size=\"small\">\r\n\t\t\t\t\t\t\t\t{buttonTitle}\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\ticonSize={IconSize.default}\r\n\t\t\t\t\t\t\ticonColor={IconColor.grey}\r\n\t\t\t\t\t\t\tstartIconType={IconType.close}\r\n\t\t\t\t\t\t\tonClick={onClose}\r\n\t\t\t\t\t\t\tsize=\"small\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{/* <Icon color={IconColor.grey} type={IconType.close} /> */}\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\t// elevation={!severity || severity === 'info' ? 6 : 0}\r\n\t\t\t\tclassName={classNames(\r\n\t\t\t\t\tstyle.root,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t[style.noSeverityTextColor]: _.isUndefined(severity),\r\n\t\t\t\t\t\t[style.noSeverityBackground]: _.isUndefined(severity),\r\n\t\t\t\t\t\t[style.variantInfo]: severity === EnumNotificationSeverity.INFO,\r\n\t\t\t\t\t\t[style.variantWarning]: severity === EnumNotificationSeverity.WARNING,\r\n\t\t\t\t\t\t[style.variantError]: severity === EnumNotificationSeverity.ERROR,\r\n\t\t\t\t\t\t[style.variantSuccess]: severity === EnumNotificationSeverity.SUCCESS,\r\n\t\t\t\t\t},\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t)}\r\n\t\t\t\t{...props}\r\n\t\t\t>\r\n\t\t\t\t{notificationTitle && (\r\n\t\t\t\t\t<AlertTitle\r\n\t\t\t\t\t\tclassName={classNames(style.title, {\r\n\t\t\t\t\t\t\t[style.noSeverityTextColor]: _.isUndefined(severity),\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{notificationTitle}\r\n\t\t\t\t\t</AlertTitle>\r\n\t\t\t\t)}\r\n\t\t\t\t<div className={style.message}>{message}</div>\r\n\t\t\t</Alert>\r\n\t\t);\r\n\t},\r\n);\r\n\r\nNotification.displayName = 'Notification';\r\n\r\ntype TNotificationProps = Omit<AlertProps, 'onClose'> & {\r\n\tisLoading?: boolean;\r\n\tbuttonTitle?: ReactNode;\r\n\tmessage: ReactNode;\r\n\tnotificationTitle?: ReactNode;\r\n\twithIcon?: boolean;\r\n\tonClose?: PropertyHandler<undefined>;\r\n};\r\n\r\nexport default Notification;\r\n","enum EnumActions {\r\n\tDISABLE_SERVER = 'CLIENT_DISABLE_SERVER',\r\n\tREADY = 'CLIENT_READY',\r\n\tGLOBAL_ERROR = 'CLIENT_GLOBAL_ERROR',\r\n\tRESET_STORE = 'CLIENT_RESET_STORE',\r\n}\r\n\r\nexport default EnumActions;\r\n","import _ from 'lodash';\r\nimport React from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {OptionsObject, useSnackbar} from 'notistack';\r\nimport {AlertColor} from '@mui/material/Alert/Alert';\r\n\r\nimport {useStoreSelector} from '@infomat/core/src/Hooks/useStoreSelector';\r\nimport {selectShowingNotifications} from '@infomat/core/src/Redux/Notifications/Selectors/selectShowingNotifications';\r\nimport {selectDismissingNotifications} from '@infomat/core/src/Redux/Notifications/Selectors/selectDismissingNotifications';\r\nimport {EnumNotificationStatus} from '@infomat/core/src/Redux/Notifications/EnumNotificationStatus';\r\nimport {EnumAbstractNotificationCloseReason} from '@infomat/core/src/Services/UINotification';\r\nimport notificationsClientOnlyActions from '@infomat/core/src/Redux/Notifications/Actions/notificationsClientOnlyActions';\r\nimport Notification from '@infomat/uikit/src/Notification/Notification';\r\n\r\nconst NotifierContainer = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst showingNotifications = useStoreSelector(selectShowingNotifications);\r\n\tconst dismissingNotifications = useStoreSelector(selectDismissingNotifications);\r\n\tconst {enqueueSnackbar, closeSnackbar} = useSnackbar();\r\n\r\n\tReact.useEffect(() => {\r\n\t\tshowingNotifications.forEach(\r\n\t\t\t({key, message, notificationTitle, buttonTitle, severity, isLoading, duration, isNotAutoClose}) => {\r\n\t\t\t\tconst extendedOptions: OptionsObject = {\r\n\t\t\t\t\tkey,\r\n\t\t\t\t\tautoHideDuration: duration,\r\n\t\t\t\t\tonClose: (event, reason, myKey) => {\r\n\t\t\t\t\t\t// prevent click-aways from closing the snack\r\n\t\t\t\t\t\tif (reason === EnumAbstractNotificationCloseReason.CLICKED_AWAY) {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tonExited: (node, myKey) => {\r\n\t\t\t\t\t\t// remove this snackbar from redux store\r\n\t\t\t\t\t\tif (!isNotAutoClose) {\r\n\t\t\t\t\t\t\tdispatch(notificationsClientOnlyActions.removeSnackbar(myKey));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t};\r\n\r\n\t\t\t\tconst onClose = () => closeSnackbar(key);\r\n\t\t\t\textendedOptions.content = (\r\n\t\t\t\t\t<Notification\r\n\t\t\t\t\t\tnotificationTitle={notificationTitle}\r\n\t\t\t\t\t\tmessage={message}\r\n\t\t\t\t\t\tbuttonTitle={buttonTitle as React.ReactNode}\r\n\t\t\t\t\t\tseverity={severity as AlertColor}\r\n\t\t\t\t\t\tonClose={onClose}\r\n\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t\t// display snackbar using notistack\r\n\t\t\t\tenqueueSnackbar(message, extendedOptions);\r\n\r\n\t\t\t\t// keep track of snackbars that we've displayed\r\n\t\t\t\tdispatch(notificationsClientOnlyActions.changeStatus({key, status: EnumNotificationStatus.SHOWN}));\r\n\t\t\t},\r\n\t\t);\r\n\r\n\t\t_.forEach(dismissingNotifications, (notification) => {\r\n\t\t\tcloseSnackbar(notification.key);\r\n\t\t\tdispatch(\r\n\t\t\t\tnotificationsClientOnlyActions.changeStatus({key: notification.key, status: EnumNotificationStatus.DISMISSED}),\r\n\t\t\t);\r\n\t\t});\r\n\t}, [closeSnackbar, enqueueSnackbar, dispatch, showingNotifications, dismissingNotifications]);\r\n\r\n\treturn null;\r\n};\r\n\r\nexport default NotifierContainer;\r\n","import React, {ReactNode, useEffect} from 'react';\r\nimport {SnackbarProvider} from 'notistack';\r\nimport {YMaps} from '@pbe/react-yandex-maps';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport VerticalHeightUnitAdjuster from 'src/Components/VerticalHeightUnitAdjuster';\r\nimport DocumentTitleContainer from 'src/Containers/DocumentTitleContainer';\r\nimport {userClientOnlyActions} from '@infomat/core/src/Redux/User/Actions/userClientOnlyActions';\r\n\r\nimport NotifierContainer from 'src/Containers/NotifierContainer';\r\n\r\nconst PageContainerDesktop = ({children}: TPageContainerProps) => {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tuseEffect(() => {\r\n\t\tconst handleOnline = () => {\r\n\t\t\tdispatch(userClientOnlyActions.updateNetworkStatus(navigator.onLine));\r\n\t\t};\r\n\r\n\t\twindow.addEventListener('online', handleOnline);\r\n\t\twindow.addEventListener('offline', handleOnline);\r\n\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener('online', handleOnline);\r\n\t\t\twindow.removeEventListener('offline', handleOnline);\r\n\t\t};\r\n\t}, [dispatch]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<DocumentTitleContainer />\r\n\t\t\t<VerticalHeightUnitAdjuster />\r\n\t\t\t<SnackbarProvider\r\n\t\t\t\tanchorOrigin={{\r\n\t\t\t\t\tvertical: 'top',\r\n\t\t\t\t\thorizontal: 'right',\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<YMaps query={{lang: 'ru_RU', apikey: 'f89a7ec4-649c-4e9e-b286-86fd506b69bb'}}>\r\n\t\t\t\t\t<NotifierContainer />\r\n\t\t\t\t\t{children}\r\n\t\t\t\t</YMaps>\r\n\t\t\t</SnackbarProvider>\r\n\t\t\t{/* <WebNotificationContainer /> */}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\ntype TPageContainerProps = {\r\n\tchildren?: ReactNode;\r\n\tisOverscrollBehaviorContain?: boolean;\r\n};\r\n\r\nexport default PageContainerDesktop;\r\n","import React, {FC, Suspense} from 'react';\r\nimport {Navigate} from 'react-router';\r\n\r\nimport {useStoreSelector} from '@infomat/core/src/Hooks/useStoreSelector';\r\nimport Spinner from '@infomat/uikit/src/Spinner/Spinner';\r\nimport {selectIsLoggedIn} from '@infomat/core/src/Redux/User/Selectors/selectIsLoggedIn';\r\n\r\nimport {Routes} from 'src/Routes/Routes';\r\nimport PageContainerDesktop from 'src/Routes/PageContainer/PageContainerDesktop';\r\n\r\nconst ProtectedRoute = ({Comp}: {Comp?: FC}) => {\r\n\tconst isLoggedIn = useStoreSelector(selectIsLoggedIn);\r\n\r\n\tif (!isLoggedIn) {\r\n\t\treturn <Navigate to={Routes.home} state={{location: undefined}} replace />;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<PageContainerDesktop>\r\n\t\t\t<Suspense fallback={<Spinner isGlobal />}>{Comp && <Comp />}</Suspense>\r\n\t\t</PageContainerDesktop>\r\n\t);\r\n};\r\n\r\nexport default ProtectedRoute;\r\n","import {Navigate, Outlet} from 'react-router-dom';\r\nimport React, {Suspense} from 'react';\r\nimport {useLocation} from 'react-router';\r\n\r\nimport {useStoreSelector} from '@infomat/core/src/Hooks/useStoreSelector';\r\nimport {selectIsLoggedIn} from '@infomat/core/src/Redux/User/Selectors/selectIsLoggedIn';\r\nimport Spinner from '@infomat/uikit/src/Spinner/Spinner';\r\n\r\nimport {Routes} from 'src/Routes/Routes';\r\nimport PageContainerDesktop from 'src/Routes/PageContainer/PageContainerDesktop';\r\n\r\nconst PublicRoute = ({startPath = Routes.information}: TPublicRouteProps) => {\r\n\tconst isLoggedIn = useStoreSelector(selectIsLoggedIn);\r\n\tconst {state} = useLocation();\r\n\r\n\tif (isLoggedIn) {\r\n\t\treturn <Navigate to={state?.location || startPath} replace />;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<PageContainerDesktop>\r\n\t\t\t<Suspense fallback={<Spinner isGlobal />}>\r\n\t\t\t\t<Outlet />\r\n\t\t\t</Suspense>\r\n\t\t</PageContainerDesktop>\r\n\t);\r\n};\r\n\r\ntype TPublicRouteProps = {\r\n\tstartPath?: string;\r\n};\r\n\r\nexport default PublicRoute;\r\n","import {LoaderFunction, LoaderFunctionArgs} from 'react-router-dom';\r\nimport {Store} from 'redux';\r\n\r\nimport {routingClientOnlyActions} from '@infomat/core/src/Redux/Routing/Actions/routingClientOnlyActions';\r\n\r\nimport {EnumRouteSlugs} from './EnumRouteSlugs';\r\n\r\nexport const pageLoader =\r\n\t(store: Store, path: EnumRouteSlugs, args: LoaderFunctionArgs): LoaderFunction =>\r\n\t() => {\r\n\t\tstore.dispatch(routingClientOnlyActions.updateStateAfterNavigation({path, params: args.params}));\r\n\r\n\t\treturn null;\r\n\t};\r\n","import React, {lazy, Suspense} from 'react';\r\nimport {createBrowserRouter, createRoutesFromElements, Route} from 'react-router-dom';\r\n\r\nimport LoginPage from 'src/Routes/Pages/Desktop/LoginPage';\r\nimport ProtectedRoute from 'src/Routes/ProtectedRoute/ProtectedRoute';\r\nimport PublicRoute from 'src/Routes/PublicRoute/PublicRoute';\r\nimport store from 'src/Redux/store';\r\nimport {pageLoader} from 'src/Routes/PageLoaders';\r\nimport {EnumRouteSlugs} from 'src/Routes/EnumRouteSlugs';\r\n// import BaseChatPage from './Pages/Desktop/BaseChatPage';\r\n// import GeneralInformationPage from './Pages/Desktop/GeneralInformationPage/GeneralInformationPage';\r\n// import EditEventPage from './Pages/Desktop/EditEventPage/EditEventPage';\r\n// import EventsListPage from './Pages/Desktop/EventsListPage/EventsListPage';\r\n// import RecommendListPage from './Pages/Desktop/RecommendListPage/RecommendListPage';\r\n// import TouristRoutPage from './Pages/Desktop/TouristRoutPage/TouristRoutPage';\r\n// import TouristRoutesListPage from './Pages/Desktop/TouristRoutesListPage/TouristRoutesListPage';\r\n// import SubcategoryObjectPage from './Pages/Desktop/SubcategoryObjectPage/SubcategoryObjectPage';\r\n// import SubcategoryObjectsListPage from './Pages/Desktop/SubcategoryObjectsListPage/SubcategoryObjectsListPage';\r\n// import CategoryObjectPage from './Pages/Desktop/CategoryObjectPage/CategoryObjectPage';\r\n// import CategoryObjectsListPage from './Pages/Desktop/CategoryObjectsListPage/CategoryObjectsListPage';\r\n// import TouristObjectPage from './Pages/Desktop/TouristObjectPage/TouristObjectPage';\r\n// import TouristObjectsListPage from './Pages/Desktop/TouristObjectsListPage/TouristObjectsListPage';\r\n// import NotFoundPage from './Pages/Common/NotFoundPage';\r\n\r\nconst BaseChatPage = lazy(() => import('src/Routes/Pages/Desktop/BaseChatPage'));\r\nconst GeneralInformationPage = lazy(\r\n\t() => import('src/Routes/Pages/Desktop/GeneralInformationPage/GeneralInformationPage'),\r\n);\r\nconst EditEventPage = lazy(() => import('src/Routes/Pages/Desktop/EditEventPage/EditEventPage'));\r\nconst CategoryObjectPage = lazy(() => import('src/Routes/Pages/Desktop/CategoryObjectPage/CategoryObjectPage'));\r\nconst SubcategoryObjectPage = lazy(\r\n\t() => import('src/Routes/Pages/Desktop/SubcategoryObjectPage/SubcategoryObjectPage'),\r\n);\r\nconst TouristObjectPage = lazy(() => import('src/Routes/Pages/Desktop/TouristObjectPage/TouristObjectPage'));\r\nconst TouristObjectsListPage = lazy(\r\n\t() => import('src/Routes/Pages/Desktop/TouristObjectsListPage/TouristObjectsListPage'),\r\n);\r\nconst CategoryObjectsListPage = lazy(\r\n\t() => import('src/Routes/Pages/Desktop/CategoryObjectsListPage/CategoryObjectsListPage'),\r\n);\r\nconst SubcategoryObjectsListPage = lazy(\r\n\t() => import('src/Routes/Pages/Desktop/SubcategoryObjectsListPage/SubcategoryObjectsListPage'),\r\n);\r\nconst TouristRoutPage = lazy(() => import('src/Routes/Pages/Desktop/TouristRoutPage/TouristRoutPage'));\r\nconst TouristRoutesListPage = lazy(\r\n\t() => import('src/Routes/Pages/Desktop/TouristRoutesListPage/TouristRoutesListPage'),\r\n);\r\nconst RecommendListPage = lazy(() => import('src/Routes/Pages/Desktop/RecommendListPage/RecommendListPage'));\r\nconst EventsListPage = lazy(() => import('src/Routes/Pages/Desktop/EventsListPage/EventsListPage'));\r\nconst NotFound = lazy(() => import('src/Routes/Pages/Common/NotFoundPage'));\r\n\r\nconst RouterDesktop = createBrowserRouter(\r\n\tcreateRoutesFromElements(\r\n\t\t<>\r\n\t\t\t<Route element={<PublicRoute />}>\r\n\t\t\t\t<Route index element={<LoginPage />} />\r\n\t\t\t</Route>\r\n\t\t\t<Route element={<ProtectedRoute Comp={BaseChatPage} />}>\r\n\t\t\t\t<Route\r\n\t\t\t\t\tloader={(args) => pageLoader(store, EnumRouteSlugs.INFORMATION, args)(args)}\r\n\t\t\t\t\tpath={EnumRouteSlugs.INFORMATION}\r\n\t\t\t\t\telement={\r\n\t\t\t\t\t\t<Suspense>\r\n\t\t\t\t\t\t\t<GeneralInformationPage />\r\n\t\t\t\t\t\t</Suspense>\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t\t<Route\r\n\t\t\t\t\tloader={(args) => pageLoader(store, EnumRouteSlugs.EVENT, args)(args)}\r\n\t\t\t\t\tpath={EnumRouteSlugs.EVENT}\r\n\t\t\t\t\telement={\r\n\t\t\t\t\t\t<Suspense>\r\n\t\t\t\t\t\t\t<EditEventPage />\r\n\t\t\t\t\t\t</Suspense>\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t\t<Route\r\n\t\t\t\t\tloader={(args) => pageLoader(store, EnumRouteSlugs.EVENTS, args)(args)}\r\n\t\t\t\t\tpath={EnumRouteSlugs.EVENTS}\r\n\t\t\t\t\telement={\r\n\t\t\t\t\t\t<Suspense>\r\n\t\t\t\t\t\t\t<EventsListPage />\r\n\t\t\t\t\t\t</Suspense>\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t\t<Route\r\n\t\t\t\t\tloader={(args) => pageLoader(store, EnumRouteSlugs.RECOMMEND, args)(args)}\r\n\t\t\t\t\tpath={EnumRouteSlugs.RECOMMEND}\r\n\t\t\t\t\telement={\r\n\t\t\t\t\t\t<Suspense>\r\n\t\t\t\t\t\t\t<RecommendListPage />\r\n\t\t\t\t\t\t</Suspense>\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t\t<Route\r\n\t\t\t\t\tloader={(args) => pageLoader(store, EnumRouteSlugs.TOURIST_ROUT, args)(args)}\r\n\t\t\t\t\tpath={EnumRouteSlugs.TOURIST_ROUT}\r\n\t\t\t\t\telement={\r\n\t\t\t\t\t\t<Suspense>\r\n\t\t\t\t\t\t\t<TouristRoutPage />\r\n\t\t\t\t\t\t</Suspense>\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t\t<Route\r\n\t\t\t\t\tloader={(args) => pageLoader(store, EnumRouteSlugs.TOURIST_ROUTES, args)(args)}\r\n\t\t\t\t\tpath={EnumRouteSlugs.TOURIST_ROUTES}\r\n\t\t\t\t\telement={\r\n\t\t\t\t\t\t<Suspense>\r\n\t\t\t\t\t\t\t<TouristRoutesListPage />\r\n\t\t\t\t\t\t</Suspense>\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t\t<Route\r\n\t\t\t\t\tloader={(args) => pageLoader(store, EnumRouteSlugs.SUBCATEGORY_OBJECT, args)(args)}\r\n\t\t\t\t\tpath={EnumRouteSlugs.SUBCATEGORY_OBJECT}\r\n\t\t\t\t\telement={\r\n\t\t\t\t\t\t<Suspense>\r\n\t\t\t\t\t\t\t<SubcategoryObjectPage />\r\n\t\t\t\t\t\t</Suspense>\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t\t<Route\r\n\t\t\t\t\tloader={(args) => pageLoader(store, EnumRouteSlugs.SUBCATEGORIES_OBJECTS, args)(args)}\r\n\t\t\t\t\tpath={EnumRouteSlugs.SUBCATEGORIES_OBJECTS}\r\n\t\t\t\t\telement={\r\n\t\t\t\t\t\t<Suspense>\r\n\t\t\t\t\t\t\t<SubcategoryObjectsListPage />\r\n\t\t\t\t\t\t</Suspense>\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t\t<Route\r\n\t\t\t\t\tloader={(args) => pageLoader(store, EnumRouteSlugs.CATEGORY_OBJECT, args)(args)}\r\n\t\t\t\t\tpath={EnumRouteSlugs.CATEGORY_OBJECT}\r\n\t\t\t\t\telement={\r\n\t\t\t\t\t\t<Suspense>\r\n\t\t\t\t\t\t\t<CategoryObjectPage />\r\n\t\t\t\t\t\t</Suspense>\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t\t<Route\r\n\t\t\t\t\tloader={(args) => pageLoader(store, EnumRouteSlugs.CATEGORIES_OBJECTS, args)(args)}\r\n\t\t\t\t\tpath={EnumRouteSlugs.CATEGORIES_OBJECTS}\r\n\t\t\t\t\telement={\r\n\t\t\t\t\t\t<Suspense>\r\n\t\t\t\t\t\t\t<CategoryObjectsListPage />\r\n\t\t\t\t\t\t</Suspense>\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<Route\r\n\t\t\t\t\tloader={(args) => pageLoader(store, EnumRouteSlugs.TOURIST_OBJECT, args)(args)}\r\n\t\t\t\t\tpath={EnumRouteSlugs.TOURIST_OBJECT}\r\n\t\t\t\t\telement={\r\n\t\t\t\t\t\t<Suspense>\r\n\t\t\t\t\t\t\t<TouristObjectPage />\r\n\t\t\t\t\t\t</Suspense>\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t\t<Route\r\n\t\t\t\t\tloader={(args) => pageLoader(store, EnumRouteSlugs.TOURIST_OBJECTS, args)(args)}\r\n\t\t\t\t\tpath={EnumRouteSlugs.TOURIST_OBJECTS}\r\n\t\t\t\t\telement={\r\n\t\t\t\t\t\t<Suspense>\r\n\t\t\t\t\t\t\t<TouristObjectsListPage />\r\n\t\t\t\t\t\t</Suspense>\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t</Route>\r\n\r\n\t\t\t<Route\r\n\t\t\t\telement={\r\n\t\t\t\t\t<Suspense>\r\n\t\t\t\t\t\t<NotFound />\r\n\t\t\t\t\t</Suspense>\r\n\t\t\t\t}\r\n\t\t\t\tpath=\"*\"\r\n\t\t\t/>\r\n\t\t</>,\r\n\t),\r\n);\r\n\r\nexport default RouterDesktop;\r\n","import {Action} from 'redux';\r\n\r\nimport EnumActions from './EnumActions';\r\n\r\nexport enum EnumStopStreamWarningAction {\r\n\tLOGOUT,\r\n\tSTOP_STREAM,\r\n}\r\n\r\nabstract class ActionCreator {\r\n\tstatic clientReady = (): Action<EnumActions.READY> => ({\r\n\t\ttype: EnumActions.READY,\r\n\t});\r\n\r\n\tstatic disableServer = (): Action<EnumActions.DISABLE_SERVER> => ({\r\n\t\ttype: EnumActions.DISABLE_SERVER,\r\n\t});\r\n\r\n\tstatic globalError = (code: number, reason: string): TGlobalErrorAction => ({\r\n\t\ttype: EnumActions.GLOBAL_ERROR,\r\n\t\tcode,\r\n\t\treason,\r\n\t});\r\n\r\n\tstatic resetStore = () => ({\r\n\t\ttype: EnumActions.RESET_STORE,\r\n\t});\r\n}\r\n\r\nexport type TGlobalErrorAction = {\r\n\tcode: number;\r\n\treason: string;\r\n} & Action<EnumActions.GLOBAL_ERROR>;\r\n\r\nexport default ActionCreator;\r\n","import React, {useEffect} from 'react';\r\nimport {createBrowserRouter, RouterProvider} from 'react-router-dom';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport ActionCreator from '@infomat/core/src/Actions/Client/ActionCreator';\r\n\r\nimport sagaRunner from 'src/Redux/sagaRunner';\r\nimport {createSagaContext} from 'src/Redux/sagaContext';\r\n\r\nconst AppRouter = ({router}: TAppRouterProps) => {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tuseEffect(() => {\r\n\t\tsagaRunner.setContext(createSagaContext(router));\r\n\t\tdispatch(ActionCreator.clientReady());\r\n\t}, [dispatch, router]);\r\n\r\n\treturn <RouterProvider router={router} />;\r\n};\r\n\r\ntype TAppRouterProps = {\r\n\trouter: ReturnType<typeof createBrowserRouter>;\r\n};\r\n\r\nexport default AppRouter;\r\n","import {matchPath} from 'react-router';\r\nimport {createBrowserRouter} from 'react-router-dom';\r\nimport _ from 'lodash';\r\nimport {RelativeRoutingType} from '@remix-run/router';\r\n\r\nimport {EnumSagaContext, TNavigateOptions, TSagaContext} from '@infomat/core/src/Redux/sagaContext';\r\n\r\nimport {Routes} from 'src/Routes/Routes';\r\nimport {getCloseModalRoute} from 'src/Utils/Navigation/getCloseModalRoute';\r\n\r\nexport const createSagaContext = (router: ReturnType<typeof createBrowserRouter>): TSagaContext => {\r\n\tconst navigate = (path: string, options?: TNavigateOptions & {relative?: RelativeRoutingType}) => {\r\n\t\trouter.navigate(path, _.assign({state: {bypassNavigationPrompt: true}}, options));\r\n\t};\r\n\r\n\treturn {\r\n\t\t[EnumSagaContext.ROUTER]: {\r\n\t\t\tgoHome(options) {\r\n\t\t\t\tnavigate(Routes.home, options);\r\n\t\t\t},\r\n\r\n\t\t\tgoInformation(options) {\r\n\t\t\t\tnavigate(Routes.information, options);\r\n\t\t\t},\r\n\r\n\t\t\tgoEvents(options) {\r\n\t\t\t\tnavigate(Routes.events, options);\r\n\t\t\t},\r\n\r\n\t\t\tgoEvent(id, options) {\r\n\t\t\t\tnavigate(Routes.event(id), options);\r\n\t\t\t},\r\n\r\n\t\t\tgoRecommend(options) {\r\n\t\t\t\tnavigate(Routes.recommend, options);\r\n\t\t\t},\r\n\r\n\t\t\tgoTouristRoutes(options) {\r\n\t\t\t\tnavigate(Routes.touristRoutes, options);\r\n\t\t\t},\r\n\r\n\t\t\tgoTouristRout(id, options) {\r\n\t\t\t\tnavigate(Routes.touristRout(id), options);\r\n\t\t\t},\r\n\r\n\t\t\tgoSubcategoriesObjects(options) {\r\n\t\t\t\tnavigate(Routes.subcategoriesObjects, options);\r\n\t\t\t},\r\n\r\n\t\t\tgoSubcategoryObject(id, options) {\r\n\t\t\t\tnavigate(Routes.subcategoryObject(id), options);\r\n\t\t\t},\r\n\r\n\t\t\tgoCategoriesObjects(options) {\r\n\t\t\t\tnavigate(Routes.categoriesObjects, options);\r\n\t\t\t},\r\n\r\n\t\t\tgoCategoryObject(id, options) {\r\n\t\t\t\tnavigate(Routes.categoryObject(id), options);\r\n\t\t\t},\r\n\r\n\t\t\tgoTouristObjects(options) {\r\n\t\t\t\tnavigate(Routes.touristObjects, options);\r\n\t\t\t},\r\n\r\n\t\t\tgoTouristObject(id, options) {\r\n\t\t\t\tnavigate(Routes.touristObject(id), options);\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n};\r\n","import React from 'react';\r\n\r\nimport {selectIsLoggedIn} from '@infomat/core/src/Redux/User/Selectors/selectIsLoggedIn';\r\nimport {useStoreSelector} from '@infomat/core/src/Hooks/useStoreSelector';\r\n\r\nimport Information from 'src/Components/Information/Information';\r\nimport RouterDesktop from 'src/Routes/RouterDesktop';\r\nimport AppRouter from 'src/AppRouter';\r\n\r\nconst AppRouterContainerDesktop = () => {\r\n\tconst isLoggedIn = useStoreSelector(selectIsLoggedIn);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{isLoggedIn && <Information />}\r\n\t\t\t<div className=\"content-container\">\r\n\t\t\t\t<AppRouter router={RouterDesktop} />\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default AppRouterContainerDesktop;\r\n"],"names":["actionCreator","dispatch","useDispatch","useCallback","EnumUnmountAction","useIsFirstRender","isFirstRenderRef","useRef","isFirstRender","current","usePrevious","value","ref","previous","useMemoCompare","getter","comparator","_","resultRef","useUnmountEffect","callback","useEffect","useStableCallback","fn","inputRef","outputRef","debounceFn","useDebounced","wait","options","unmountAction","CANCEL","stableFn","debounced","arg","callbackIsUnmountFlush","FLUSH","flush","cancel","useStoreSelector","selector","params","selectorFunc","state","useSelector","title","variant","children","placement","disabled","props","disableHoverListener","style","userSelect","type","label","RootComponent","React","open","setOpen","anchorRef","handleClose","event","contains","target","handleListKeyDown","key","preventDefault","className","onClick","prevOpen","Typography","Icon","IconType","size","IconSize","Popper","anchorEl","role","undefined","transition","disablePortal","TransitionProps","Grow","Paper","classes","root","ClickAwayListener","onClickAway","MenuList","onKeyDown","helperText","restProps","Grid","container","direction","error","selectLogin","createSelector","getUserState","login","onLogout","Dashboard","MenuItem","useActionDispatcher","userClientOnlyActions","justifyContent","alignItems","paddingBottom","item","gap","src","InfomatLogo","alt","selectIsNetworkAvailable","isNetworkAvailable","selectErrorLogin","errorLogin","selectIsLoading","isLoading","forwardRef","iconType","iconSize","iconColor","IconButton","color","hasError","isDisabled","textStrings","inputDataTestId","buttonDataTestId","useState","isPasswordVisible","setPasswordVisible","toggleIsPasswordVisible","prevState","TextField","autoComplete","InputProps","endAdornment","Tooltip","hidePassword","showPassword","onMouseDown","onLogin","isLoggingIn","setLogin","password","setPassword","onSubmit","e","paddingX","noValidate","name","placeholder","tabIndex","onChange","length","ButtonWithTooltip","isLoggedIn","selectIsLoggedIn","userClientToServerActions","to","pathname","Routes","Spinner","Helmet","adjustHeight","vh","window","innerHeight","document","documentElement","setProperty","addEventListener","removeEventListener","DocumentTitle","selectShowingNotifications","selectAllNotifications","notifications","notification","status","EnumNotificationStatus","selectDismissingNotifications","notificationType","IconColor","Notification","message","notificationTitle","action","severity","withIcon","onClose","buttonTitle","icon","CircularProgress","Alert","el","Button","startIconType","classNames","EnumNotificationSeverity","AlertTitle","displayName","EnumActions","showingNotifications","dismissingNotifications","useSnackbar","enqueueSnackbar","closeSnackbar","forEach","duration","isNotAutoClose","extendedOptions","autoHideDuration","reason","myKey","EnumAbstractNotificationCloseReason","onExited","node","notificationsClientOnlyActions","content","handleOnline","navigator","onLine","anchorOrigin","vertical","horizontal","query","lang","apikey","Comp","Suspense","fallback","isGlobal","location","replace","startPath","useLocation","pageLoader","store","path","args","routingClientOnlyActions","BaseChatPage","lazy","GeneralInformationPage","EditEventPage","CategoryObjectPage","SubcategoryObjectPage","TouristObjectPage","TouristObjectsListPage","CategoryObjectsListPage","SubcategoryObjectsListPage","TouristRoutPage","TouristRoutesListPage","RecommendListPage","EventsListPage","NotFound","createBrowserRouter","createRoutesFromElements","element","index","loader","EnumRouteSlugs","EnumStopStreamWarningAction","ActionCreator","clientReady","disableServer","globalError","code","resetStore","router","sagaRunner","navigate","bypassNavigationPrompt","EnumSagaContext","goHome","goInformation","goEvents","goEvent","id","goRecommend","goTouristRoutes","goTouristRout","goSubcategoriesObjects","goSubcategoryObject","goCategoriesObjects","goCategoryObject","goTouristObjects","goTouristObject","createSagaContext","RouterDesktop"],"sourceRoot":""}